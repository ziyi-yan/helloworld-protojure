;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC helloworld.Greeter Client Implementation
;;;----------------------------------------------------------------------------------
(ns helloworld.Greeter.client
  (:require [helloworld :refer :all]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn SayHello
  ([client params] (SayHello client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "helloworld.Greeter"
              :method  "SayHello"
              :input   {:f helloworld/new-HelloRequest :ch input}
              :output  {:f helloworld/pb->HelloReply :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

